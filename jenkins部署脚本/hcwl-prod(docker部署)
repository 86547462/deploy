git_url="https://codeup.aliyun.com/65791b094e02d56555c42113/HCWL.git"

def MACRO_SERVICE_MAP = [:];
def MACRO_PORT_MAP = [:];
MACRO_SERVICE_MAP.put("hcwl-gateway", "hcwl-gateway/");
MACRO_SERVICE_MAP.put("hcwl-auth", "hcwl-auth/");
MACRO_SERVICE_MAP.put("hcwl-module-cloud", "hcwl-modules/hcwl-module-cloud/");
MACRO_SERVICE_MAP.put("hcwl-module-system", "hcwl-modules/hcwl-module-system/");
MACRO_SERVICE_MAP.put("hcwl-module-education", "hcwl-modules/hcwl-module-education/");
MACRO_SERVICE_MAP.put("hcwl-module-finance", "hcwl-modules/hcwl-module-finance/");
MACRO_SERVICE_MAP.put("hcwl-module-job", "hcwl-modules/hcwl-module-job/");
MACRO_SERVICE_MAP.put("hcwl-module-on-school", "hcwl-modules/hcwl-module-on-school/");
MACRO_SERVICE_MAP.put("hcwl-module-redisson", "hcwl-modules/hcwl-module-redisson/");
MACRO_SERVICE_MAP.put("hcwl-module-stu", "hcwl-modules/hcwl-module-stu/");
MACRO_SERVICE_MAP.put("hcwl-module-workflow", "hcwl-modules/hcwl-module-workflow/");
MACRO_PORT_MAP.put("hcwl-gateway", 8080);
MACRO_PORT_MAP.put("hcwl-auth", 9200);
MACRO_PORT_MAP.put("hcwl-module-cloud", 9202);
MACRO_PORT_MAP.put("hcwl-module-system", 9201);
MACRO_PORT_MAP.put("hcwl-module-education", 9204);
MACRO_PORT_MAP.put("hcwl-module-finance", 9207);
MACRO_PORT_MAP.put("hcwl-module-job", 9998);
MACRO_PORT_MAP.put("hcwl-module-on-school", 9205);
MACRO_PORT_MAP.put("hcwl-module-redisson", 9206);
MACRO_PORT_MAP.put("hcwl-module-stu", 9203);
MACRO_PORT_MAP.put("hcwl-module-workflow", 9208);


//仓库地址
DOCKER_REGISTRY = '192.168.10.101'
//仓库命名空间
IMAGE_NAME_PREFIX = 'hongcai-dev'
// 部署目标服务器
target_host = "192.168.10.102"
target_port = "22"

def createVersion() {
    return new Date().format('yyyyMMddHHmmss') + "_${env.BUILD_ID}"
}


pipeline {
    agent any
    tools {
        // Install the Maven version configured as "M3" and add it to the path.
        maven "maven-3.9.9"
        jdk "jdk-11.0.26"
    }
    environment {
        _version = createVersion()
    }
    stages {
        stage('version') {
            steps {
                sh label: '获取环境版本',
                script: '''
                    git version
                    java -version
                    mvn -v
                    docker -v
                '''
            }
        }
        stage('获取代码') {
            steps {
                git branch: 'test', credentialsId: 'afcbb615-0e33-43ab-96ff-7e4859d975c4', url: "${git_url}"
            }
        }
        stage('maven构建') {
            steps {
                sh label: 'maven构建',
                script:'''
                    mvn clean package '-Dmaven.test.skip=true' -P test1
                '''
            }
        }
        stage('镜像仓库登陆') {
            steps {
                withCredentials([usernamePassword(credentialsId: '738f3419-c1a5-4c18-bdf3-ca157f26b47c', usernameVariable: 'username', passwordVariable: 'password', variable: '容器镜像服务账号密码')]) {
                    sh """
                        docker login --username=${username} --password=${password} ${DOCKER_REGISTRY}
                        echo '登陆成功'
                        """
                }
            }
        }
        stage('制作docker镜像'){
            steps {
                script {
                    def selectedServices = params.SERVICE_TO_BUILD.tokenize(',')
                    for (service in selectedServices) {
                        //获取目录地址
                        def serviceDirPath = MACRO_SERVICE_MAP[service]
                        if(serviceDirPath){
                            //镜像名称
                            def imageName = "${DOCKER_REGISTRY}/${IMAGE_NAME_PREFIX}/${service}:${_version}"
                            sh """
                                cd ${serviceDirPath}
                                docker build -f Dockerfile -t ${imageName} --push .
                                docker rmi ${imageName}
                            """
                        }else{
                            echo "未能找到指定的服务"
                        }

                    }
                }
            }
        }
        stage('项目部署') {
            stages {
                stage('部署开始') {
                steps {
                withCredentials([usernamePassword(credentialsId: '216fb4cb-81d4-4b63-8060-b53f4d8db79f', passwordVariable: 'SSH_PASSWORD', usernameVariable: 'SSH_USERNAME', variable: '部署目标服务器账号密码')]) {
                    withCredentials([usernamePassword(credentialsId:'738f3419-c1a5-4c18-bdf3-ca157f26b47c', usernameVariable:'username', passwordVariable:'password', variable: '容器镜像服务账号密码')]) {
                        sh label:'',
                        script:"""
                            sshpass -p ${SSH_PASSWORD} ssh -tt -p ${target_port} -o StrictHostKeyChecking=no ${SSH_USERNAME}@${target_host} << reallsh
                            sudo docker login --username=${username} --password=${password} ${DOCKER_REGISTRY}
                            exit
                            reallsh
                        """
                        }

                }
                    }
                }
                stage('服务部署中') {
                    steps {
                        withCredentials([usernamePassword(credentialsId: '216fb4cb-81d4-4b63-8060-b53f4d8db79f', passwordVariable: 'SSH_PASSWORD', usernameVariable: 'SSH_USERNAME', variable: '部署目标服务器账号密码')]) {
                            script {
                                params.SERVICE_TO_BUILD.tokenize(',').each { projectName ->
                                	def servicePort = MACRO_PORT_MAP[projectName]
                                    echo "当前处理项目: ${projectName}"
                                    echo "当前工作目录: pwd"
                                    echo "为项目 ${projectName} 分配的端口: ${servicePort}"
                                    sh """
                                            sshpass -p ${SSH_PASSWORD} ssh -tt -p ${target_port} -o StrictHostKeyChecking=no ${SSH_USERNAME}@${target_host} << reallsh
                                            sudo docker stop ${projectName}
                                            sudo docker rm ${projectName}
                                            sudo docker pull ${DOCKER_REGISTRY}/${IMAGE_NAME_PREFIX}/${projectName}:${_version}
                                            sudo docker run -itd --name ${projectName} -p ${servicePort}:${servicePort} -v /hcwl/:/hcwl/ --restart always ${DOCKER_REGISTRY}/${IMAGE_NAME_PREFIX}/${projectName}:${_version}
                                            sudo docker images -q ${DOCKER_REGISTRY}/${IMAGE_NAME_PREFIX}/${projectName} | xargs -r docker rmi --force || true
                                            exit 0
                                            reallsh
                                        """
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
